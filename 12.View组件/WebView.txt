webView 网页客户端：

使用demo:
webView = (WebView)findViewById(R.id.webView_id);
webView.getSettings().setJavaScriptEnabled(true);
webView.setWebViewClient(new WebViewClient(){
@Override
public boolean shouldOverrideUrlLoading(WebView view, String url){//每次点击页面链接能捕获到
			view.loadUrl(url);
			// TODO Auto-generated method stub			
			//MyBroadcastReceiver.sendBroad_MSG_HAL(url);
			return true;
	}			
});
//打开web 
webView.loadUrl(myGit_strUrl);	

-------------------------------------------
加载资源方式
//方式1. 加载一个网页： webView.loadUrl("http://www.google.com/"); 
//方式2：加载apk包中的html页面 webView.loadUrl("file:///android_asset/test.html"); 
//方式3：加载手机本地的html页面
 webView.loadUr("content://com.android.htmlfileprovider/sdcard/test.html"); 
// 方式4： 加载 HTML 页面的一小段内容 WebView.loadData(String data, String mimeType, String encoding)；



//是否可以后退 Webview.canGoBack()
 //后退网页 Webview.goBack() 
//是否可以前进 Webview.canGoForward() 
//前进网页 Webview.goForward() 

------------------------------------------------
注意：	@Override  //有浏览器 webView 点击返回 会 activity.finish  故 特别处理一下
	public boolean onKeyDown(int keyCode, KeyEvent event) { 
		// TODO Auto-generated method stub
		if ((keyCode == KeyEvent.KEYCODE_BACK) && webView.canGoBack()) { 
			webView.goBack();
		      return true;
		  }
		return super.onKeyDown(keyCode, event);
	}


//激活WebView为活跃状态，能正常执行网页的响应 webView.onResume() ； 
//当页面被失去焦点被切换到后台不可见状态，需要执行onPause
 //通过onPause动作通知内核暂停所有的动作，比如DOM的解析、plugin的执行、JavaScript执行。 webView.onPause()； 
//当应用程序(存在webview)被切换到后台时，这个方法不仅仅针对当前的webview而是全局的全应用程序的webview
 //它会暂停所有webview的layout，parsing，javascripttimer。降低CPU功耗。 webView.pauseTimers() 
//恢复pauseTimers状态 webView.resumeTimers()； 
//销毁Webview 
//在关闭了Activity时，如果Webview的音乐或视频，还在播放。就必须销毁Webview 
//但是注意：webview调用destory时,webview仍绑定在Activity上 
//这是由于自定义webview构建时传入了该Activity的context对象 
//因此需要先从父容器中移除webview,然后再销毁webview: rootLayout.removeView(webView); webView.destroy();




