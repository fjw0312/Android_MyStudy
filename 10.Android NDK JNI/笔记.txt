NDK：
下载工具链：android-ndk-r8b-linux-x86.tar.bz2

1.配置JNI 生成android项目的so
需要将android-ndk-r8b-linux-x86.tar.bz2 解压后配置ndk-build 环境
eg:$PATH=/usr/fangCC/android-ndk-r8b/ndk-build:$PATH

2.配置android 标准的C/C++编译链  编译C/C++应用程序
  使用android-ndk-r8b-linux-x86.tar.bz2 解压后进入/build/tools/下，执行文件下的
  make-standalone-toolchain.sh 脚本，需要追加一些参数（具体加--help查看）
  会生成android 标准编译链于/tmp/ndk
  再将生成的编译链解压，配置环境即可使用arm-linux-androideabi-gcc等编译
  
  
  
  +=================================================================JNICommon.h===============================================
  #include <jni.h>
/* Header for class jniExport */

#ifndef _Included_JNIcommon
#define _Included_JNIcommon


//添加日志打印 支持
#include<android/log.h>
#define LOG_TAG "System.out" 
#define LOGI(...)  __android_log_print(ANDROID_LOG_INFO,LOG_TAG, __VA_ARGS__) 
#define LOGD(...)  __android_log_print(ANDROID_LOG_DEBUG,LOG_TAG, __VA_ARGS__) 
#define LOGW(...)  __android_log_print(ANDROID_LOG_WARN,LOG_TAG, __VA_ARGS__) 
#define LOGE(...)  __android_log_print(ANDROID_LOG_ERROR,LOG_TAG, __VA_ARGS__) 
#define LOGF(...)  __android_log_print(ANDROID_LOG_FATAL,LOG_TAG, __VA_ARGS__)


//定义 JNI 接口 变量
#define  JNI_void       JNIEXPORT void JNICALL
#define  JNI_boolean    JNIEXPORT jboolean JNICALL
#define  JNI_int        JNIEXPORT jint JNICALL
#define  JNI_float      JNIEXPORT jfloat JNICALL
#define  JNI_double     JNIEXPORT jdouble JNICALL
#define  JNI_string     JNIEXPORT jstring JNICALL
#define  JNI_bytes      JNIEXPORT jintArray JNICALL
#define  JNI_strings    JNIEXPORT jobjectArray JNICALL

//定义 java JNI 的接口 类： com.jni.Export 
#define  JNI_Funtion_void(f)        JNIEXPORT void JNICALL Java_com_jni_Export_##f
#define  JNI_Funtion_boolean(f)     JNIEXPORT jboolean JNICALL Java_com_jni_Export_##f
#define  JNI_Funtion_int(f)         JNIEXPORT jint JNICALL Java_com_jni_Export_##f
#define  JNI_Funtion_float(f)       JNIEXPORT jfloat JNICALL Java_com_jni_Export_##f
#define  JNI_Funtion_double(f)      JNIEXPORT jdouble JNICALL Java_com_jni_Export_##f
#define  JNI_Funtion_string(f)      JNIEXPORT string JNICALL Java_com_jni_Export_##f
#define  JNI_Funtion_strings(f)     JNIEXPORT jobjectArray JNICALL Java_com_jni_Export_##f
#define  JNI_Funtion_bytes(f)       JNIEXPORT jintArray JNICALL Java_com_jni_Export_##f

/**
* notice: 使用demo:   JNI_Api_void(com_jni_MakeKey,Test01)(JNIEnv * env, jobject thiz);   注意类名不能用宏定义   
*/
//定义 JNI 函数接口宏定义  简单调用  packageClass  java工程的包名+类名  functionName java代码函数名
#define  JNI_Api_void(p,f)        JNIEXPORT void JNICALL Java_##p##_##f
#define  JNI_Api_boolean(p,f)     JNIEXPORT jboolean JNICALL Java_##p##_##f
#define  JNI_Api_int(p,f)         JNIEXPORT jint JNICALL Java_##p##_##f
#define  JNI_Api_float(p,f)       JNIEXPORT jfloat JNICALL Java_##p##_##f
#define  JNI_Api_double(p,f)      JNIEXPORT jdouble JNICALL Java_##p##_##f
#define  JNI_Api_string(p,f)      JNIEXPORT string JNICALL Java_##p##_##f
#define  JNI_Api_strings(p,f)     JNIEXPORT jobjectArray JNICALL Java_##p##_##f
#define  JNI_Api_bytes(p,f)       JNIEXPORT jintArray JNICALL Java_##p##_##f

//定义 JNI 接口基本参数
#define  ATTR_Context  JNIEnv *env, jobject thiz  


#endif
