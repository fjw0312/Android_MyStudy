OOM  outofMemoryError 内存溢出。
内存分配出问题（瞬间new过大内存） 4.x系统只要allocated + 新分配的内存 >= getMemoryClass()的时候就会发生OOM
大部分的内存溢出是 堆内存溢出。
内存泄漏也会影响 内存溢出。 当不断内存泄漏最后会导致内存溢出。但不会影响系统（linux-c就会，android不会）

内存泄漏常见原因：
1.数据库的cursor没有关闭。
2.构造adapter没有使用缓存contentview。
3.调用registerReceiver()后未调用unregisterReceiver().（注意）
4.未关闭InputStream/OutputStream。
5.Bitmap使用后未调用recycle()。
6.Context泄漏。
7.static关键字等  如果static Context 会容易出问题
8.注意优化ListView Adapter.getView()
9.handler的释放。
--------------
1.单列  2.静态变量  3.匿名内部类  4.资源使用后未释放
http://blog.csdn.net/tuke_tuke/article/details/52316285

使用bitmap  1.及时回收  2.注意大小分辨率

二、出现内存泄露原因
#1.资源对象没关闭造成的内存泄露，try catch finally中将资源回收放到finally语句可以有效避免OOM。资源性对象比如：
1-1，Cursor
1-2，调用registerReceiver后未调用unregisterReceiver()
1-3，未关闭InputStream/OutputStream
1-4，Bitmap使用后未调用recycle()
 
#2.作用域不一样，导致对象不能被垃圾回收器回收，比如：
2-1，非静态内部类会隐式地持有外部类的引用，
2-2，Context泄露
概括一下，避免Context相关的内存泄露，记住以下事情：
   1、 不要保留对Context-Activity长时间的引用（对Activity的引用的时候，必须确保拥有和Activity一样的生命周期）
   2、尝试使用Context-Application来替代Context-Activity 
   3、如果你不想控制内部类的生命周期，应避免在Activity中使用非静态的内部类，而应该使用静态的内部类，并在其中创建一个对Activity的弱引用。
      这种情况的解决办法是使用一个静态的内部类，其中拥有对外部类的WeakReference。
2-3，Activity 中 Thread 引用其他对象也容易出现对象泄露。
2-4，onReceive方法里执行了太多的操作

#3.内存压力过大
  3-1，图片资源加载过多，超过内存使用空间，例如Bitmap 的使用
  3-2，重复创建view，listview应该使用convertview和viewholder

三、个人已遇到的内存泄漏
1.在循环中 new内存
2.不断创建线程，线程中有new 内存
3.不断创建多个socket连接
4.不断创建多个Volley网络请求RequestQueue
5.读取加载过大图片或文件
6.没有关闭对应打开的资源/流/广播手动register/数据库查询
7.activity引用保持过长时间
8.listView等布局文件适配getView不创建new内存。
